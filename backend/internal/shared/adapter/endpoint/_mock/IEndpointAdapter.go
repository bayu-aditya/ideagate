// Code generated by mockery v2.42.1. DO NOT EDIT.

package mockery

import (
	context "context"

	endpoint "github.com/bayu-aditya/ideagate/backend/internal/shared/domain/entity/endpoint"
	mock "github.com/stretchr/testify/mock"
)

// IEndpointAdapter is an autogenerated mock type for the IEndpointAdapter type
type IEndpointAdapter struct {
	mock.Mock
}

type IEndpointAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *IEndpointAdapter) EXPECT() *IEndpointAdapter_Expecter {
	return &IEndpointAdapter_Expecter{mock: &_m.Mock}
}

// GetEndpoint provides a mock function with given fields: ctx, id
func (_m *IEndpointAdapter) GetEndpoint(ctx context.Context, id string) (endpoint.Endpoint, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpoint")
	}

	var r0 endpoint.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (endpoint.Endpoint, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) endpoint.Endpoint); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(endpoint.Endpoint)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IEndpointAdapter_GetEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndpoint'
type IEndpointAdapter_GetEndpoint_Call struct {
	*mock.Call
}

// GetEndpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *IEndpointAdapter_Expecter) GetEndpoint(ctx interface{}, id interface{}) *IEndpointAdapter_GetEndpoint_Call {
	return &IEndpointAdapter_GetEndpoint_Call{Call: _e.mock.On("GetEndpoint", ctx, id)}
}

func (_c *IEndpointAdapter_GetEndpoint_Call) Run(run func(ctx context.Context, id string)) *IEndpointAdapter_GetEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IEndpointAdapter_GetEndpoint_Call) Return(_a0 endpoint.Endpoint, _a1 error) *IEndpointAdapter_GetEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IEndpointAdapter_GetEndpoint_Call) RunAndReturn(run func(context.Context, string) (endpoint.Endpoint, error)) *IEndpointAdapter_GetEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetListEndpoint provides a mock function with given fields: ctx
func (_m *IEndpointAdapter) GetListEndpoint(ctx context.Context) ([]endpoint.Endpoint, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListEndpoint")
	}

	var r0 []endpoint.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]endpoint.Endpoint, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []endpoint.Endpoint); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]endpoint.Endpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IEndpointAdapter_GetListEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListEndpoint'
type IEndpointAdapter_GetListEndpoint_Call struct {
	*mock.Call
}

// GetListEndpoint is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IEndpointAdapter_Expecter) GetListEndpoint(ctx interface{}) *IEndpointAdapter_GetListEndpoint_Call {
	return &IEndpointAdapter_GetListEndpoint_Call{Call: _e.mock.On("GetListEndpoint", ctx)}
}

func (_c *IEndpointAdapter_GetListEndpoint_Call) Run(run func(ctx context.Context)) *IEndpointAdapter_GetListEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IEndpointAdapter_GetListEndpoint_Call) Return(_a0 []endpoint.Endpoint, _a1 error) *IEndpointAdapter_GetListEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IEndpointAdapter_GetListEndpoint_Call) RunAndReturn(run func(context.Context) ([]endpoint.Endpoint, error)) *IEndpointAdapter_GetListEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEndpointAdapter creates a new instance of IEndpointAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEndpointAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEndpointAdapter {
	mock := &IEndpointAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
