// source: core/endpoint/endpoint.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.endpoint.Action', null, global);
goog.exportSymbol('proto.endpoint.ActionEnd', null, global);
goog.exportSymbol('proto.endpoint.ActionMysql', null, global);
goog.exportSymbol('proto.endpoint.ActionRest', null, global);
goog.exportSymbol('proto.endpoint.ActionSleep', null, global);
goog.exportSymbol('proto.endpoint.Edge', null, global);
goog.exportSymbol('proto.endpoint.Endpoint', null, global);
goog.exportSymbol('proto.endpoint.Query', null, global);
goog.exportSymbol('proto.endpoint.Return', null, global);
goog.exportSymbol('proto.endpoint.Setting', null, global);
goog.exportSymbol('proto.endpoint.SettingRequest', null, global);
goog.exportSymbol('proto.endpoint.Step', null, global);
goog.exportSymbol('proto.endpoint.Variable', null, global);
goog.exportSymbol('proto.endpoint.Workflow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Endpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.Endpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Endpoint.displayName = 'proto.endpoint.Endpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Variable.displayName = 'proto.endpoint.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Setting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.Setting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Setting.displayName = 'proto.endpoint.Setting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.SettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.SettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.SettingRequest.displayName = 'proto.endpoint.SettingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Workflow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoint.Workflow.repeatedFields_, null);
};
goog.inherits(proto.endpoint.Workflow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Workflow.displayName = 'proto.endpoint.Workflow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Step = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoint.Step.repeatedFields_, null);
};
goog.inherits(proto.endpoint.Step, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Step.displayName = 'proto.endpoint.Step';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Action.displayName = 'proto.endpoint.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.ActionEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoint.ActionEnd.repeatedFields_, null);
};
goog.inherits(proto.endpoint.ActionEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.ActionEnd.displayName = 'proto.endpoint.ActionEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.ActionMysql = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoint.ActionMysql.repeatedFields_, null);
};
goog.inherits(proto.endpoint.ActionMysql, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.ActionMysql.displayName = 'proto.endpoint.ActionMysql';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.ActionRest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.ActionRest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.ActionRest.displayName = 'proto.endpoint.ActionRest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.ActionSleep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.ActionSleep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.ActionSleep.displayName = 'proto.endpoint.ActionSleep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.endpoint.Query.repeatedFields_, null);
};
goog.inherits(proto.endpoint.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Query.displayName = 'proto.endpoint.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Return = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.Return, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Return.displayName = 'proto.endpoint.Return';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.endpoint.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.endpoint.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.endpoint.Edge.displayName = 'proto.endpoint.Edge';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Endpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Endpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Endpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Endpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    path: jspb.Message.getFieldWithDefault(msg, 4, ""),
    setting: (f = msg.getSetting()) && proto.endpoint.Setting.toObject(includeInstance, f),
    workflow: (f = msg.getWorkflow()) && proto.endpoint.Workflow.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Endpoint}
 */
proto.endpoint.Endpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Endpoint;
  return proto.endpoint.Endpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Endpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Endpoint}
 */
proto.endpoint.Endpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = new proto.endpoint.Setting;
      reader.readMessage(value,proto.endpoint.Setting.deserializeBinaryFromReader);
      msg.setSetting(value);
      break;
    case 6:
      var value = new proto.endpoint.Workflow;
      reader.readMessage(value,proto.endpoint.Workflow.deserializeBinaryFromReader);
      msg.setWorkflow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Endpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Endpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Endpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Endpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSetting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.endpoint.Setting.serializeBinaryToWriter
    );
  }
  f = message.getWorkflow();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.endpoint.Workflow.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endpoint.Endpoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Endpoint} returns this
 */
proto.endpoint.Endpoint.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project_id = 2;
 * @return {string}
 */
proto.endpoint.Endpoint.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Endpoint} returns this
 */
proto.endpoint.Endpoint.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.endpoint.Endpoint.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Endpoint} returns this
 */
proto.endpoint.Endpoint.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.endpoint.Endpoint.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Endpoint} returns this
 */
proto.endpoint.Endpoint.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Setting setting = 5;
 * @return {?proto.endpoint.Setting}
 */
proto.endpoint.Endpoint.prototype.getSetting = function() {
  return /** @type{?proto.endpoint.Setting} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.Setting, 5));
};


/**
 * @param {?proto.endpoint.Setting|undefined} value
 * @return {!proto.endpoint.Endpoint} returns this
*/
proto.endpoint.Endpoint.prototype.setSetting = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Endpoint} returns this
 */
proto.endpoint.Endpoint.prototype.clearSetting = function() {
  return this.setSetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Endpoint.prototype.hasSetting = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Workflow workflow = 6;
 * @return {?proto.endpoint.Workflow}
 */
proto.endpoint.Endpoint.prototype.getWorkflow = function() {
  return /** @type{?proto.endpoint.Workflow} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.Workflow, 6));
};


/**
 * @param {?proto.endpoint.Workflow|undefined} value
 * @return {!proto.endpoint.Endpoint} returns this
*/
proto.endpoint.Endpoint.prototype.setWorkflow = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Endpoint} returns this
 */
proto.endpoint.Endpoint.prototype.clearWorkflow = function() {
  return this.setWorkflow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Endpoint.prototype.hasWorkflow = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    required: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    pb_default: (f = msg.getDefault()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Variable}
 */
proto.endpoint.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Variable;
  return proto.endpoint.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Variable}
 */
proto.endpoint.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequired(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setDefault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequired();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getDefault();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.endpoint.Variable.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Variable} returns this
 */
proto.endpoint.Variable.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool required = 2;
 * @return {boolean}
 */
proto.endpoint.Variable.prototype.getRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.endpoint.Variable} returns this
 */
proto.endpoint.Variable.prototype.setRequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Any value = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.endpoint.Variable.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.endpoint.Variable} returns this
*/
proto.endpoint.Variable.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Variable} returns this
 */
proto.endpoint.Variable.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Variable.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Any default = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.endpoint.Variable.prototype.getDefault = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.endpoint.Variable} returns this
*/
proto.endpoint.Variable.prototype.setDefault = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Variable} returns this
 */
proto.endpoint.Variable.prototype.clearDefault = function() {
  return this.setDefault(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Variable.prototype.hasDefault = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Setting.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Setting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Setting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Setting.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timeoutMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numWorkers: jspb.Message.getFieldWithDefault(msg, 4, 0),
    request: (f = msg.getRequest()) && proto.endpoint.SettingRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Setting}
 */
proto.endpoint.Setting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Setting;
  return proto.endpoint.Setting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Setting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Setting}
 */
proto.endpoint.Setting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeoutMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumWorkers(value);
      break;
    case 5:
      var value = new proto.endpoint.SettingRequest;
      reader.readMessage(value,proto.endpoint.SettingRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Setting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Setting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Setting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Setting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeoutMs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNumWorkers();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.endpoint.SettingRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.endpoint.Setting.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Setting} returns this
 */
proto.endpoint.Setting.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.endpoint.Setting.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Setting} returns this
 */
proto.endpoint.Setting.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timeout_ms = 3;
 * @return {number}
 */
proto.endpoint.Setting.prototype.getTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoint.Setting} returns this
 */
proto.endpoint.Setting.prototype.setTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 num_workers = 4;
 * @return {number}
 */
proto.endpoint.Setting.prototype.getNumWorkers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoint.Setting} returns this
 */
proto.endpoint.Setting.prototype.setNumWorkers = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional SettingRequest request = 5;
 * @return {?proto.endpoint.SettingRequest}
 */
proto.endpoint.Setting.prototype.getRequest = function() {
  return /** @type{?proto.endpoint.SettingRequest} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.SettingRequest, 5));
};


/**
 * @param {?proto.endpoint.SettingRequest|undefined} value
 * @return {!proto.endpoint.Setting} returns this
*/
proto.endpoint.Setting.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Setting} returns this
 */
proto.endpoint.Setting.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Setting.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.SettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.SettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.SettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.SettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryMap: (f = msg.getQueryMap()) ? f.toObject(includeInstance, proto.endpoint.Variable.toObject) : [],
    jsonMap: (f = msg.getJsonMap()) ? f.toObject(includeInstance, proto.endpoint.Variable.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.SettingRequest}
 */
proto.endpoint.SettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.SettingRequest;
  return proto.endpoint.SettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.SettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.SettingRequest}
 */
proto.endpoint.SettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQueryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endpoint.Variable.deserializeBinaryFromReader, "", new proto.endpoint.Variable());
         });
      break;
    case 2:
      var value = msg.getJsonMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endpoint.Variable.deserializeBinaryFromReader, "", new proto.endpoint.Variable());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.SettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.SettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.SettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.SettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endpoint.Variable.serializeBinaryToWriter);
  }
  f = message.getJsonMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endpoint.Variable.serializeBinaryToWriter);
  }
};


/**
 * map<string, Variable> query = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endpoint.Variable>}
 */
proto.endpoint.SettingRequest.prototype.getQueryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endpoint.Variable>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.endpoint.Variable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.endpoint.SettingRequest} returns this
 */
proto.endpoint.SettingRequest.prototype.clearQueryMap = function() {
  this.getQueryMap().clear();
  return this;
};


/**
 * map<string, Variable> json = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endpoint.Variable>}
 */
proto.endpoint.SettingRequest.prototype.getJsonMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endpoint.Variable>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.endpoint.Variable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.endpoint.SettingRequest} returns this
 */
proto.endpoint.SettingRequest.prototype.clearJsonMap = function() {
  this.getJsonMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoint.Workflow.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Workflow.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Workflow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Workflow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Workflow.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepsList: jspb.Message.toObjectList(msg.getStepsList(),
    proto.endpoint.Step.toObject, includeInstance),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    proto.endpoint.Edge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Workflow}
 */
proto.endpoint.Workflow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Workflow;
  return proto.endpoint.Workflow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Workflow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Workflow}
 */
proto.endpoint.Workflow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoint.Step;
      reader.readMessage(value,proto.endpoint.Step.deserializeBinaryFromReader);
      msg.addSteps(value);
      break;
    case 2:
      var value = new proto.endpoint.Edge;
      reader.readMessage(value,proto.endpoint.Edge.deserializeBinaryFromReader);
      msg.addEdges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Workflow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Workflow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Workflow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Workflow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endpoint.Step.serializeBinaryToWriter
    );
  }
  f = message.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.endpoint.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Step steps = 1;
 * @return {!Array<!proto.endpoint.Step>}
 */
proto.endpoint.Workflow.prototype.getStepsList = function() {
  return /** @type{!Array<!proto.endpoint.Step>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoint.Step, 1));
};


/**
 * @param {!Array<!proto.endpoint.Step>} value
 * @return {!proto.endpoint.Workflow} returns this
*/
proto.endpoint.Workflow.prototype.setStepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endpoint.Step=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoint.Step}
 */
proto.endpoint.Workflow.prototype.addSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endpoint.Step, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoint.Workflow} returns this
 */
proto.endpoint.Workflow.prototype.clearStepsList = function() {
  return this.setStepsList([]);
};


/**
 * repeated Edge edges = 2;
 * @return {!Array<!proto.endpoint.Edge>}
 */
proto.endpoint.Workflow.prototype.getEdgesList = function() {
  return /** @type{!Array<!proto.endpoint.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoint.Edge, 2));
};


/**
 * @param {!Array<!proto.endpoint.Edge>} value
 * @return {!proto.endpoint.Workflow} returns this
*/
proto.endpoint.Workflow.prototype.setEdgesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.endpoint.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoint.Edge}
 */
proto.endpoint.Workflow.prototype.addEdges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.endpoint.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoint.Workflow} returns this
 */
proto.endpoint.Workflow.prototype.clearEdgesList = function() {
  return this.setEdgesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoint.Step.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Step.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Step.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Step} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Step.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    variablesMap: (f = msg.getVariablesMap()) ? f.toObject(includeInstance, proto.endpoint.Variable.toObject) : [],
    action: (f = msg.getAction()) && proto.endpoint.Action.toObject(includeInstance, f),
    outputsMap: (f = msg.getOutputsMap()) ? f.toObject(includeInstance, proto.endpoint.Variable.toObject) : [],
    returnsList: jspb.Message.toObjectList(msg.getReturnsList(),
    proto.endpoint.Return.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Step}
 */
proto.endpoint.Step.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Step;
  return proto.endpoint.Step.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Step} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Step}
 */
proto.endpoint.Step.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = msg.getVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endpoint.Variable.deserializeBinaryFromReader, "", new proto.endpoint.Variable());
         });
      break;
    case 5:
      var value = new proto.endpoint.Action;
      reader.readMessage(value,proto.endpoint.Action.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 6:
      var value = msg.getOutputsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endpoint.Variable.deserializeBinaryFromReader, "", new proto.endpoint.Variable());
         });
      break;
    case 7:
      var value = new proto.endpoint.Return;
      reader.readMessage(value,proto.endpoint.Return.deserializeBinaryFromReader);
      msg.addReturns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Step.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Step.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Step} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Step.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endpoint.Variable.serializeBinaryToWriter);
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.endpoint.Action.serializeBinaryToWriter
    );
  }
  f = message.getOutputsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endpoint.Variable.serializeBinaryToWriter);
  }
  f = message.getReturnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.endpoint.Return.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endpoint.Step.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.endpoint.Step.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.endpoint.Step.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, Variable> variables = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endpoint.Variable>}
 */
proto.endpoint.Step.prototype.getVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endpoint.Variable>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.endpoint.Variable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.clearVariablesMap = function() {
  this.getVariablesMap().clear();
  return this;
};


/**
 * optional Action action = 5;
 * @return {?proto.endpoint.Action}
 */
proto.endpoint.Step.prototype.getAction = function() {
  return /** @type{?proto.endpoint.Action} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.Action, 5));
};


/**
 * @param {?proto.endpoint.Action|undefined} value
 * @return {!proto.endpoint.Step} returns this
*/
proto.endpoint.Step.prototype.setAction = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Step.prototype.hasAction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, Variable> outputs = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endpoint.Variable>}
 */
proto.endpoint.Step.prototype.getOutputsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endpoint.Variable>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.endpoint.Variable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.clearOutputsMap = function() {
  this.getOutputsMap().clear();
  return this;
};


/**
 * repeated Return returns = 7;
 * @return {!Array<!proto.endpoint.Return>}
 */
proto.endpoint.Step.prototype.getReturnsList = function() {
  return /** @type{!Array<!proto.endpoint.Return>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoint.Return, 7));
};


/**
 * @param {!Array<!proto.endpoint.Return>} value
 * @return {!proto.endpoint.Step} returns this
*/
proto.endpoint.Step.prototype.setReturnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.endpoint.Return=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoint.Return}
 */
proto.endpoint.Step.prototype.addReturns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.endpoint.Return, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoint.Step} returns this
 */
proto.endpoint.Step.prototype.clearReturnsList = function() {
  return this.setReturnsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataSourceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    end: (f = msg.getEnd()) && proto.endpoint.ActionEnd.toObject(includeInstance, f),
    mysql: (f = msg.getMysql()) && proto.endpoint.ActionMysql.toObject(includeInstance, f),
    rest: (f = msg.getRest()) && proto.endpoint.ActionRest.toObject(includeInstance, f),
    sleep: (f = msg.getSleep()) && proto.endpoint.ActionSleep.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Action}
 */
proto.endpoint.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Action;
  return proto.endpoint.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Action}
 */
proto.endpoint.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataSourceId(value);
      break;
    case 2:
      var value = new proto.endpoint.ActionEnd;
      reader.readMessage(value,proto.endpoint.ActionEnd.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 3:
      var value = new proto.endpoint.ActionMysql;
      reader.readMessage(value,proto.endpoint.ActionMysql.deserializeBinaryFromReader);
      msg.setMysql(value);
      break;
    case 4:
      var value = new proto.endpoint.ActionRest;
      reader.readMessage(value,proto.endpoint.ActionRest.deserializeBinaryFromReader);
      msg.setRest(value);
      break;
    case 5:
      var value = new proto.endpoint.ActionSleep;
      reader.readMessage(value,proto.endpoint.ActionSleep.deserializeBinaryFromReader);
      msg.setSleep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataSourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.endpoint.ActionEnd.serializeBinaryToWriter
    );
  }
  f = message.getMysql();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.endpoint.ActionMysql.serializeBinaryToWriter
    );
  }
  f = message.getRest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.endpoint.ActionRest.serializeBinaryToWriter
    );
  }
  f = message.getSleep();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.endpoint.ActionSleep.serializeBinaryToWriter
    );
  }
};


/**
 * optional string data_source_id = 1;
 * @return {string}
 */
proto.endpoint.Action.prototype.getDataSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Action} returns this
 */
proto.endpoint.Action.prototype.setDataSourceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActionEnd end = 2;
 * @return {?proto.endpoint.ActionEnd}
 */
proto.endpoint.Action.prototype.getEnd = function() {
  return /** @type{?proto.endpoint.ActionEnd} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.ActionEnd, 2));
};


/**
 * @param {?proto.endpoint.ActionEnd|undefined} value
 * @return {!proto.endpoint.Action} returns this
*/
proto.endpoint.Action.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Action} returns this
 */
proto.endpoint.Action.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Action.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ActionMysql mysql = 3;
 * @return {?proto.endpoint.ActionMysql}
 */
proto.endpoint.Action.prototype.getMysql = function() {
  return /** @type{?proto.endpoint.ActionMysql} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.ActionMysql, 3));
};


/**
 * @param {?proto.endpoint.ActionMysql|undefined} value
 * @return {!proto.endpoint.Action} returns this
*/
proto.endpoint.Action.prototype.setMysql = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Action} returns this
 */
proto.endpoint.Action.prototype.clearMysql = function() {
  return this.setMysql(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Action.prototype.hasMysql = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ActionRest rest = 4;
 * @return {?proto.endpoint.ActionRest}
 */
proto.endpoint.Action.prototype.getRest = function() {
  return /** @type{?proto.endpoint.ActionRest} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.ActionRest, 4));
};


/**
 * @param {?proto.endpoint.ActionRest|undefined} value
 * @return {!proto.endpoint.Action} returns this
*/
proto.endpoint.Action.prototype.setRest = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Action} returns this
 */
proto.endpoint.Action.prototype.clearRest = function() {
  return this.setRest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Action.prototype.hasRest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ActionSleep sleep = 5;
 * @return {?proto.endpoint.ActionSleep}
 */
proto.endpoint.Action.prototype.getSleep = function() {
  return /** @type{?proto.endpoint.ActionSleep} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.ActionSleep, 5));
};


/**
 * @param {?proto.endpoint.ActionSleep|undefined} value
 * @return {!proto.endpoint.Action} returns this
*/
proto.endpoint.Action.prototype.setSleep = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Action} returns this
 */
proto.endpoint.Action.prototype.clearSleep = function() {
  return this.setSleep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Action.prototype.hasSleep = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoint.ActionEnd.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.ActionEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.ActionEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.ActionEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    returnDataFromStepIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.ActionEnd}
 */
proto.endpoint.ActionEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.ActionEnd;
  return proto.endpoint.ActionEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.ActionEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.ActionEnd}
 */
proto.endpoint.ActionEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addReturnDataFromStepIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.ActionEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.ActionEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.ActionEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturnDataFromStepIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string return_data_from_step_ids = 1;
 * @return {!Array<string>}
 */
proto.endpoint.ActionEnd.prototype.getReturnDataFromStepIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.endpoint.ActionEnd} returns this
 */
proto.endpoint.ActionEnd.prototype.setReturnDataFromStepIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.endpoint.ActionEnd} returns this
 */
proto.endpoint.ActionEnd.prototype.addReturnDataFromStepIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoint.ActionEnd} returns this
 */
proto.endpoint.ActionEnd.prototype.clearReturnDataFromStepIdsList = function() {
  return this.setReturnDataFromStepIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoint.ActionMysql.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.ActionMysql.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.ActionMysql.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.ActionMysql} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionMysql.toObject = function(includeInstance, msg) {
  var f, obj = {
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.endpoint.Query.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.ActionMysql}
 */
proto.endpoint.ActionMysql.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.ActionMysql;
  return proto.endpoint.ActionMysql.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.ActionMysql} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.ActionMysql}
 */
proto.endpoint.ActionMysql.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoint.Query;
      reader.readMessage(value,proto.endpoint.Query.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.ActionMysql.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.ActionMysql.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.ActionMysql} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionMysql.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.endpoint.Query.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Query queries = 1;
 * @return {!Array<!proto.endpoint.Query>}
 */
proto.endpoint.ActionMysql.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.endpoint.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoint.Query, 1));
};


/**
 * @param {!Array<!proto.endpoint.Query>} value
 * @return {!proto.endpoint.ActionMysql} returns this
*/
proto.endpoint.ActionMysql.prototype.setQueriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.endpoint.Query=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoint.Query}
 */
proto.endpoint.ActionMysql.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.endpoint.Query, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoint.ActionMysql} returns this
 */
proto.endpoint.ActionMysql.prototype.clearQueriesList = function() {
  return this.setQueriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.ActionRest.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.ActionRest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.ActionRest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionRest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.endpoint.Variable.toObject(includeInstance, f),
    method: jspb.Message.getFieldWithDefault(msg, 2, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.endpoint.Variable.toObject) : [],
    requestType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    requestBody: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.ActionRest}
 */
proto.endpoint.ActionRest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.ActionRest;
  return proto.endpoint.ActionRest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.ActionRest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.ActionRest}
 */
proto.endpoint.ActionRest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoint.Variable;
      reader.readMessage(value,proto.endpoint.Variable.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 3:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.endpoint.Variable.deserializeBinaryFromReader, "", new proto.endpoint.Variable());
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.ActionRest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.ActionRest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.ActionRest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionRest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endpoint.Variable.serializeBinaryToWriter
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.endpoint.Variable.serializeBinaryToWriter);
  }
  f = message.getRequestType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRequestBody();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Variable path = 1;
 * @return {?proto.endpoint.Variable}
 */
proto.endpoint.ActionRest.prototype.getPath = function() {
  return /** @type{?proto.endpoint.Variable} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.Variable, 1));
};


/**
 * @param {?proto.endpoint.Variable|undefined} value
 * @return {!proto.endpoint.ActionRest} returns this
*/
proto.endpoint.ActionRest.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.ActionRest} returns this
 */
proto.endpoint.ActionRest.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.ActionRest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string method = 2;
 * @return {string}
 */
proto.endpoint.ActionRest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.ActionRest} returns this
 */
proto.endpoint.ActionRest.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, Variable> headers = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.endpoint.Variable>}
 */
proto.endpoint.ActionRest.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.endpoint.Variable>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.endpoint.Variable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.endpoint.ActionRest} returns this
 */
proto.endpoint.ActionRest.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;
};


/**
 * optional string request_type = 4;
 * @return {string}
 */
proto.endpoint.ActionRest.prototype.getRequestType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.ActionRest} returns this
 */
proto.endpoint.ActionRest.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string request_body = 5;
 * @return {string}
 */
proto.endpoint.ActionRest.prototype.getRequestBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.ActionRest} returns this
 */
proto.endpoint.ActionRest.prototype.setRequestBody = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.ActionSleep.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.ActionSleep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.ActionSleep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionSleep.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeoutMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.ActionSleep}
 */
proto.endpoint.ActionSleep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.ActionSleep;
  return proto.endpoint.ActionSleep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.ActionSleep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.ActionSleep}
 */
proto.endpoint.ActionSleep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeoutMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.ActionSleep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.ActionSleep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.ActionSleep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.ActionSleep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeoutMs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timeout_ms = 1;
 * @return {number}
 */
proto.endpoint.ActionSleep.prototype.getTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.endpoint.ActionSleep} returns this
 */
proto.endpoint.ActionSleep.prototype.setTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.endpoint.Query.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.endpoint.Variable.toObject(includeInstance, f),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.endpoint.Variable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Query}
 */
proto.endpoint.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Query;
  return proto.endpoint.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Query}
 */
proto.endpoint.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.endpoint.Variable;
      reader.readMessage(value,proto.endpoint.Variable.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = new proto.endpoint.Variable;
      reader.readMessage(value,proto.endpoint.Variable.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.endpoint.Variable.serializeBinaryToWriter
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.endpoint.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Variable query = 1;
 * @return {?proto.endpoint.Variable}
 */
proto.endpoint.Query.prototype.getQuery = function() {
  return /** @type{?proto.endpoint.Variable} */ (
    jspb.Message.getWrapperField(this, proto.endpoint.Variable, 1));
};


/**
 * @param {?proto.endpoint.Variable|undefined} value
 * @return {!proto.endpoint.Query} returns this
*/
proto.endpoint.Query.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.endpoint.Query} returns this
 */
proto.endpoint.Query.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.endpoint.Query.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Variable parameters = 2;
 * @return {!Array<!proto.endpoint.Variable>}
 */
proto.endpoint.Query.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.endpoint.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.endpoint.Variable, 2));
};


/**
 * @param {!Array<!proto.endpoint.Variable>} value
 * @return {!proto.endpoint.Query} returns this
*/
proto.endpoint.Query.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.endpoint.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.endpoint.Variable}
 */
proto.endpoint.Query.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.endpoint.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.endpoint.Query} returns this
 */
proto.endpoint.Query.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Return.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Return.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Return} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Return.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isFinishCondition: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nextStepId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Return}
 */
proto.endpoint.Return.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Return;
  return proto.endpoint.Return.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Return} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Return}
 */
proto.endpoint.Return.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsFinishCondition(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextStepId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Return.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Return.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Return} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Return.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsFinishCondition();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNextStepId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endpoint.Return.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Return} returns this
 */
proto.endpoint.Return.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.endpoint.Return.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Return} returns this
 */
proto.endpoint.Return.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string is_finish_condition = 3;
 * @return {string}
 */
proto.endpoint.Return.prototype.getIsFinishCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Return} returns this
 */
proto.endpoint.Return.prototype.setIsFinishCondition = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string next_step_id = 4;
 * @return {string}
 */
proto.endpoint.Return.prototype.getNextStepId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Return} returns this
 */
proto.endpoint.Return.prototype.setNextStepId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.endpoint.Edge.prototype.toObject = function(opt_includeInstance) {
  return proto.endpoint.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.endpoint.Edge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    conditionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.endpoint.Edge}
 */
proto.endpoint.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.endpoint.Edge;
  return proto.endpoint.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.endpoint.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.endpoint.Edge}
 */
proto.endpoint.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConditionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.endpoint.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.endpoint.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.endpoint.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.endpoint.Edge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConditionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.endpoint.Edge.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Edge} returns this
 */
proto.endpoint.Edge.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string condition_id = 2;
 * @return {string}
 */
proto.endpoint.Edge.prototype.getConditionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Edge} returns this
 */
proto.endpoint.Edge.prototype.setConditionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.endpoint.Edge.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Edge} returns this
 */
proto.endpoint.Edge.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dest = 4;
 * @return {string}
 */
proto.endpoint.Edge.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.endpoint.Edge} returns this
 */
proto.endpoint.Edge.prototype.setDest = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.endpoint);
