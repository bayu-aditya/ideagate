/**
 * @fileoverview gRPC-Web generated client stub for dashboard
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: dashboard/service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var core_application_application_pb = require('../core/application/application_pb.js')

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js')
const proto = {};
proto.dashboard = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dashboard.DashboardServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dashboard.DashboardServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dashboard.GetListApplicationRequest,
 *   !proto.dashboard.GetListApplicationResponse>}
 */
const methodDescriptor_DashboardService_GetListApplication = new grpc.web.MethodDescriptor(
  '/dashboard.DashboardService/GetListApplication',
  grpc.web.MethodType.UNARY,
  proto.dashboard.GetListApplicationRequest,
  proto.dashboard.GetListApplicationResponse,
  /**
   * @param {!proto.dashboard.GetListApplicationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dashboard.GetListApplicationResponse.deserializeBinary
);


/**
 * @param {!proto.dashboard.GetListApplicationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dashboard.GetListApplicationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dashboard.GetListApplicationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dashboard.DashboardServiceClient.prototype.getListApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dashboard.DashboardService/GetListApplication',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetListApplication,
      callback);
};


/**
 * @param {!proto.dashboard.GetListApplicationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dashboard.GetListApplicationResponse>}
 *     Promise that resolves to the response
 */
proto.dashboard.DashboardServicePromiseClient.prototype.getListApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dashboard.DashboardService/GetListApplication',
      request,
      metadata || {},
      methodDescriptor_DashboardService_GetListApplication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dashboard.UpsertApplicationRequest,
 *   !proto.dashboard.UpsertApplicationResponse>}
 */
const methodDescriptor_DashboardService_UpsertApplication = new grpc.web.MethodDescriptor(
  '/dashboard.DashboardService/UpsertApplication',
  grpc.web.MethodType.UNARY,
  proto.dashboard.UpsertApplicationRequest,
  proto.dashboard.UpsertApplicationResponse,
  /**
   * @param {!proto.dashboard.UpsertApplicationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dashboard.UpsertApplicationResponse.deserializeBinary
);


/**
 * @param {!proto.dashboard.UpsertApplicationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dashboard.UpsertApplicationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dashboard.UpsertApplicationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dashboard.DashboardServiceClient.prototype.upsertApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dashboard.DashboardService/UpsertApplication',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpsertApplication,
      callback);
};


/**
 * @param {!proto.dashboard.UpsertApplicationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dashboard.UpsertApplicationResponse>}
 *     Promise that resolves to the response
 */
proto.dashboard.DashboardServicePromiseClient.prototype.upsertApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dashboard.DashboardService/UpsertApplication',
      request,
      metadata || {},
      methodDescriptor_DashboardService_UpsertApplication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dashboard.DeleteApplicationRequest,
 *   !proto.dashboard.DeleteApplicationResponse>}
 */
const methodDescriptor_DashboardService_DeleteApplication = new grpc.web.MethodDescriptor(
  '/dashboard.DashboardService/DeleteApplication',
  grpc.web.MethodType.UNARY,
  proto.dashboard.DeleteApplicationRequest,
  proto.dashboard.DeleteApplicationResponse,
  /**
   * @param {!proto.dashboard.DeleteApplicationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.dashboard.DeleteApplicationResponse.deserializeBinary
);


/**
 * @param {!proto.dashboard.DeleteApplicationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dashboard.DeleteApplicationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dashboard.DeleteApplicationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dashboard.DashboardServiceClient.prototype.deleteApplication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/dashboard.DashboardService/DeleteApplication',
      request,
      metadata || {},
      methodDescriptor_DashboardService_DeleteApplication,
      callback);
};


/**
 * @param {!proto.dashboard.DeleteApplicationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dashboard.DeleteApplicationResponse>}
 *     Promise that resolves to the response
 */
proto.dashboard.DashboardServicePromiseClient.prototype.deleteApplication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/dashboard.DashboardService/DeleteApplication',
      request,
      metadata || {},
      methodDescriptor_DashboardService_DeleteApplication);
};


module.exports = proto.dashboard;

