// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dashboard/service.proto" (package "dashboard", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DashboardService } from "./service";
import type { DeleteApplicationResponse } from "./service";
import type { DeleteApplicationRequest } from "./service";
import type { UpsertApplicationResponse } from "./service";
import type { UpsertApplicationRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetListApplicationResponse } from "./service";
import type { GetListApplicationRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dashboard.DashboardService
 */
export interface IDashboardServiceClient {
    /**
     * @generated from protobuf rpc: GetListApplication(dashboard.GetListApplicationRequest) returns (dashboard.GetListApplicationResponse);
     */
    getListApplication(input: GetListApplicationRequest, options?: RpcOptions): UnaryCall<GetListApplicationRequest, GetListApplicationResponse>;
    /**
     * @generated from protobuf rpc: UpsertApplication(dashboard.UpsertApplicationRequest) returns (dashboard.UpsertApplicationResponse);
     */
    upsertApplication(input: UpsertApplicationRequest, options?: RpcOptions): UnaryCall<UpsertApplicationRequest, UpsertApplicationResponse>;
    /**
     * @generated from protobuf rpc: DeleteApplication(dashboard.DeleteApplicationRequest) returns (dashboard.DeleteApplicationResponse);
     */
    deleteApplication(input: DeleteApplicationRequest, options?: RpcOptions): UnaryCall<DeleteApplicationRequest, DeleteApplicationResponse>;
}
/**
 * @generated from protobuf service dashboard.DashboardService
 */
export class DashboardServiceClient implements IDashboardServiceClient, ServiceInfo {
    typeName = DashboardService.typeName;
    methods = DashboardService.methods;
    options = DashboardService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetListApplication(dashboard.GetListApplicationRequest) returns (dashboard.GetListApplicationResponse);
     */
    getListApplication(input: GetListApplicationRequest, options?: RpcOptions): UnaryCall<GetListApplicationRequest, GetListApplicationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetListApplicationRequest, GetListApplicationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertApplication(dashboard.UpsertApplicationRequest) returns (dashboard.UpsertApplicationResponse);
     */
    upsertApplication(input: UpsertApplicationRequest, options?: RpcOptions): UnaryCall<UpsertApplicationRequest, UpsertApplicationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertApplicationRequest, UpsertApplicationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteApplication(dashboard.DeleteApplicationRequest) returns (dashboard.DeleteApplicationResponse);
     */
    deleteApplication(input: DeleteApplicationRequest, options?: RpcOptions): UnaryCall<DeleteApplicationRequest, DeleteApplicationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteApplicationRequest, DeleteApplicationResponse>("unary", this._transport, method, opt, input);
    }
}
